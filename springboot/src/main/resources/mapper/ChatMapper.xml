<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.demo.dao.ChatDao">
    <!-- Chat的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Chat_Map" type="com.demo.entity.Chat">
        <id column="_id" property="id" />
        <result column="_from" property="from" />
        <result column="read" property="read" />
        <result column="create_time" property="createTime" />
        <result column="_to" property="to" />
        <result column="content" property="content" />
        <result column="chat_id" property="chatId" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:chat的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="chat_Column">
        chat._id as _id
        ,chat._from as _from
        ,chat.read as read
        ,chat.create_time as create_time
        ,chat._to as _to
        ,chat.content as content
        ,chat.chat_id as chat_id
    </sql>

    <!--获得类名为:Chat对应的数据库表的数据总行数 -->
    <select id="getChatRowCount" parameterType="com.demo.common.Assist" resultType="java.lang.Long">
        select count(_id) from chat
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Chat对应数据库中表的数据集合 -->
    <select id="selectChat" parameterType="com.demo.common.Assist"  resultMap="result_Chat_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="chat_Column" /> 
            </otherwise>
        </choose>
        from chat
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT _id as primary_key FROM chat
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow},#{rowSize} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=chat._id
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Chat对象,以参数Chat对象中不为空的属性作为条件进行查询-->
    <select id="selectChatByObj" parameterType="com.demo.entity.Chat" resultMap="result_Chat_Map">
        select 
            <include refid="chat_Column" /> 
        from chat
        <where>
            <if test="chatId != null "> and chat.chat_id = #{chatId}</if>
            <if test="content != null "> and chat.content = #{content}</if>
            <if test="to != null "> and chat._to = #{to}</if>
            <if test="createTime != null "> and chat.create_time = #{createTime}</if>
            <if test="read != null "> and chat.read = #{read}</if>
            <if test="from != null "> and chat._from = #{from}</if>
            <if test="id != null "> and chat._id = #{id}</if>
        </where>
    </select> 

    <!-- 通过Chat的id获得对应数据库中表的数据对象-->
    <select id="selectChatById" parameterType="java.lang.Integer" resultMap="result_Chat_Map">
        select 
            <include refid="chat_Column" /> 
        from chat
        where chat._id = #{id}
    </select> 

    <!-- 将Chat插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertChat" parameterType="com.demo.entity.Chat">
        insert into chat(_id,_from,read,create_time,_to,content,chat_id) 
        values(#{id},#{from},#{read},#{createTime},#{to},#{content},#{chatId})
    </insert>

    <!-- 将Chat中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyChat" parameterType="com.demo.entity.Chat">
        insert into chat
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">_id,</if>
            <if test="from != null">_from,</if>
            <if test="read != null">read,</if>
            <if test="createTime != null">create_time,</if>
            <if test="to != null">_to,</if>
            <if test="content != null">content,</if>
            <if test="chatId != null">chat_id,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="from != null"> #{from},</if>
            <if test="read != null"> #{read},</if>
            <if test="createTime != null"> #{createTime},</if>
            <if test="to != null"> #{to},</if>
            <if test="content != null"> #{content},</if>
            <if test="chatId != null"> #{chatId},</if>
        </trim>
    </insert>

    <!-- 将Chat批量插入到对应数据库的表中-->
    <insert id="insertChatByBatch" parameterType="ArrayList">
        insert into chat(_id,_from,read,create_time,_to,content,chat_id) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.from},#{item.read},#{item.createTime},#{item.to},#{item.content},#{item.chatId})
        </foreach>
    </insert>

    <!-- 通过Chat的id将数据库表中对应的数据删除-->
    <delete id="deleteChatById" parameterType="java.lang.Integer">
        delete from chat
        where _id = #{id}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Chat对应的数据库表的数据删除-->
    <delete id="deleteChat" parameterType="com.demo.common.Assist">
        delete from chat
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Chat的id将Chat的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateChatById" parameterType="com.demo.entity.Chat">
        update chat set
            _from=#{from}
            ,read=#{read}
            ,create_time=#{createTime}
            ,_to=#{to}
            ,content=#{content}
            ,chat_id=#{chatId}
        where _id=#{id}
    </update>

    <!-- 通过Chat的id将Chat中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyChatById" parameterType="com.demo.entity.Chat">
        update chat
        <set>
            <if test="from != null">
                _from=#{from},
            </if>
            <if test="read != null">
                read=#{read},
            </if>
            <if test="createTime != null">
                create_time=#{createTime},
            </if>
            <if test="to != null">
                _to=#{to},
            </if>
            <if test="content != null">
                content=#{content},
            </if>
            <if test="chatId != null">
                chat_id=#{chatId},
            </if>
        </set>
        where _id=#{id}
    </update>

    <!-- 通过辅助工具Assist中的条件将Chat中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateChat" parameterType="map">
        update chat
        <set>
                _id=#{enti.id},
                _from=#{enti.from},
                read=#{enti.read},
                create_time=#{enti.createTime},
                _to=#{enti.to},
                content=#{enti.content},
                chat_id=#{enti.chatId},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Chat中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyChat" parameterType="map">
        update chat
        <set>
            <if test="enti.id != null">
                _id=#{enti.id},
            </if>
            <if test="enti.from != null">
                _from=#{enti.from},
            </if>
            <if test="enti.read != null">
                read=#{enti.read},
            </if>
            <if test="enti.createTime != null">
                create_time=#{enti.createTime},
            </if>
            <if test="enti.to != null">
                _to=#{enti.to},
            </if>
            <if test="enti.content != null">
                content=#{enti.content},
            </if>
            <if test="enti.chatId != null">
                chat_id=#{enti.chatId},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>